# serverless.yml
#https://www.serverless.com/framework/docs/providers/aws/guide/serverless.yml

# custom
custom:
  appName: pspc
  domainName: manage
  serviceName: users-story
  bucketName: '${self:provider.stage}-${self:custom.appName}-${self:custom.domainName}-${self:custom.serviceName}-bucket'
  stackName: '${self:provider.stage}-${self:custom.appName}-${self:custom.domainName}-${self:custom.serviceName}-stack'
  userStoryTableName: '${self:provider.stage}_${self:custom.appName}_users_story'
  loggerMode: ALL
  dynamodb:
    start:
      migrated: true
  # serverless offline plugin setup
  serverless-offline:
    httpPort: 4000
  webpack:
    webpackConfig: 'webpack.config.js' # Name of webpack configuration file
    includeModules: false # Node modules configuration for packaging
    packager: 'npm' # Packager that will be used to package your external modules
    excludeFiles: src/**/*.test.js # Provide a glob for files to ignore

# Service name
service: '${self:custom.appName}-${self:custom.domainName}-${self:custom.serviceName}'
# Framework version constraint (semver constraint): '3', '^2.33'
frameworkVersion: '3'
# plugins
plugins:
  - serverless-webpack
  - serverless-offline
  #- serverless-plugin-include-dependencies
  - serverless-deployment-bucket
  - serverless-iam-roles-per-function

# providers
provider:
  name: aws
  # Default stage (default: dev)
  stage: ${opt:stage, 'dev'}
  # Default region (default: us-east-1)
  region: ${opt:region, 'us-east-1'}
  # The AWS profile to use to deploy (default: "default" profile)
  profile: default
  # runtime
  runtime: nodejs14.x
  # Use a custom name for the CloudFormation stack
  stackName: ${self:custom.stackName}
  # Default memory size for functions (default: 1024MB)
  memorySize: 128
  # Processor architecture: 'x86_64' or 'arm64' via Graviton2 (default: x86_64)
  architecture: arm64
  # Default timeout for functions (default: 6 seconds)
  # Note: API Gateway has a maximum timeout of 30 seconds
  timeout: 15
  # Duration for CloudWatch log retention (default: forever)
  logRetentionInDays: 1
  lambdaHashingVersion: 20201221
  # Use function versioning (enabled by default)
  versionFunctions: false
  tracing:
    # Can only be true if API Gateway is inside a stack.
    apiGateway: true
    # Optional, can be true (true equals 'Active'), 'Active' or 'PassThrough'
    lambda: true
  # Configure the S3 bucket used by Serverless Framework to deploy code packages to Lambda
  # serverless-deployment-bucket
  deploymentBucket:
    # Name of an existing bucket to use (default: created by serverless)
    name: ${self:custom.bucketName}
    # On deployment, serverless prunes artifacts older than this limit (default: 5)
    maxPreviousDeploymentArtifacts: 1
    # Enable bucket versioning (default: false)
    versioning: false
    blockPublicAccess: true
    serverSideEncryption: AES256
    # Specific tags
    tags:
      pspc:application: pspc
      pspc:component: users_story
      pspc:creator: jose.mejia
      pspc:domain-name: manage
      pspc:layer: application #application, network, integration, storage

  #https://www.serverless.com/framework/docs/providers/aws/guide/serverless.yml/#api-gateway-v1-rest-api-1
  # Use a custom name for the API Gateway API
  #apiName: '${self:provider.stage}-${self:service}'
  # Endpoint type for API Gateway REST API: edge or regional (default: edge)
  endpointType: REGIONAL
  # Optional API Gateway REST API global config
  #apiGateway:
    # Description for the API Gateway stage deployment
  #  description: API para administrar los usuarios
    # Optional detailed Cloud Watch Metrics
  #  metrics: false
  # Global environments
  environment:
    DYNDB_USERS_STORY_TBL: ${self:custom.userStoryTableName}
    STAGE: ${self:provider.stage}
    REGION: ${self:provider.region}
    APP_NAME: ${self:custom.appName}
    SERVICE_NAME: ${self:custom.serviceName}
    DOMAIN_NAME: ${self:custom.domainName}
    LOGGER_MODE: ${self:custom.loggerMode}
    JTW_SECRET_VALUE: '${self:custom.appName}/18564B1D2DD86179A51363A991CBE'
    JWT_TOKEN_LIFE: '365d'
    DYNDB_SCAN_NUM_SEGMET: ${env:DYNDB_SCAN_NUM_SEGMET, '5'}
    DYNDB_SCAN_TOTAL_SEGMET: ${env:DYNDB_SCAN_TOTAL_SEGMET, '5'}
    DYNDB_SCAN_IS_SEGMENT: ${env:DYNDB_SCAN_IS_SEGMENT, 'false'}
    DYNDB_SCAN_IS_PARALLEL: ${env:DYNDB_SCAN_IS_PARALLEL, 'false'}

  # Global tags
  tags:
    pspc:application: pspc
    pspc:component: users_story
    pspc:creator: jose.mejia
    pspc:domain-name: manage
    pspc:layer: application #application, network, integration, storage

  #stackTags:
    #pspc:application-id: pspc
    #pspc:component-id: security-users
    #pspc:component-name: security-users
    #pspc:creator-name: security-users
    #pspc:creator-id: security-users
    #pspc:domain-name: security
    #pspc:layer: application #storage, network, integration

package:
  # Package this function as an individual artifact (default: false)
  individually: true
  patterns:
    - node_modules/aws-sdk/**
    - node_modules/aws-lambda/**
    - package-lock.json
    - src/**
    - .gitignore
    - .git/**

functions:
  create:
    name: ${self:provider.stage}-${self:service}-post-create-http
    description: Create a item for ${self:custom.serviceName}
    handler: dist/application/aws/create-handler.createItemHandler
    iamRoleStatementsName: ${self:provider.stage}-${self:service}-post-create-http-role
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource:
          - { "Fn::GetAtt": ["UsersStoryDynamoDBTable", "Arn"] }
    events:
      - http:
          method: POST
          cors:
            origin: '*'
            headers: '*'
            allowCredentials: false
          private: false
          path: /${self:custom.appName}/${self:custom.domainName}/${self:custom.serviceName}
          authorizer:
            type: "TOKEN"
            authorizerId:
              Ref: UStoryApiGatewayAuthorizer

  update:
    name: ${self:provider.stage}-${self:service}-put-update-http
    description: Update a item by id for ${self:custom.serviceName}
    handler: dist/application/aws/update-handler.updateItemHandler
    iamRoleStatementsName: ${self:provider.stage}-${self:service}-put-update-http-role
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:UpdateItem
        Resource:
          - { "Fn::GetAtt": ["UsersStoryDynamoDBTable", "Arn"] }
    events:
      - http:
          method: put
          cors:
            origin: '*'
            headers: '*'
            allowCredentials: false
          private: false
          path: /${self:custom.appName}/${self:custom.domainName}/${self:custom.serviceName}/{id}
          authorizer:
            type: "TOKEN"
            authorizerId:
              Ref: UStoryApiGatewayAuthorizer

  find-by-id:
    name: ${self:provider.stage}${self:service}-get-find-by-id-http
    description: Find a item by id for ${self:custom.serviceName}
    handler: dist/application/aws/get-by-id-handler.getItemByIdHanlder
    iamRoleStatementsName: ${self:provider.stage}-${self:service}-get-find-by-id-http-role
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource:
          - { "Fn::GetAtt": ["UsersStoryDynamoDBTable", "Arn"] }
    events:
      - http:
          method: GET
          cors:
            origin: '*'
            headers: '*'
            allowCredentials: false
          private: false
          path: /${self:custom.appName}/${self:custom.domainName}/${self:custom.serviceName}/{id}
          authorizer:
            type: "TOKEN"
            authorizerId:
              Ref: UStoryApiGatewayAuthorizer

  find-all:
    name: ${self:provider.stage}${self:service}-get-find-all-http
    description: Find all items by users story id or user id for ${self:custom.serviceName}
    handler: dist/application/aws/get-all-handler.getItemAllHanlder
    iamRoleStatementsName: ${self:provider.stage}-${self:service}-get-find-all-role
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource:
          - { "Fn::GetAtt": ["UsersStoryDynamoDBTable", "Arn"] }
    events:
      - http:
          method: GET
          cors:
            origin: '*'
            headers: '*'
            allowCredentials: false
          private: false
          path: /${self:custom.appName}/${self:custom.domainName}/${self:custom.serviceName}
          authorizer:
            type: "TOKEN"
            authorizerId:
              Ref: UStoryApiGatewayAuthorizer

  delete:
    name: ${self:provider.stage}-${self:service}-delete-http
    description: Delete a item by id for ${self:custom.serviceName}
    handler: dist/application/aws/delete-handler.deleteItemByIdHandler
    iamRoleStatementsName: ${self:provider.stage}-${self:service}-delete-ttp-role
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource:
          - { "Fn::GetAtt": ["UsersStoryDynamoDBTable", "Arn"] }
      - Effect: Allow
        Action:
          - lambda:InvokeFunction
          - lambda:InvokeAsync
        Resource:
          - "*"
    events:
      - http:
          method: DELETE
          cors:
            origin: '*'
            headers: '*'
            allowCredentials: false
          private: false
          path: /${self:custom.appName}/${self:custom.domainName}/${self:custom.serviceName}/{id}
          authorizer:
            type: "TOKEN"
            authorizerId:
              Ref: UStoryApiGatewayAuthorizer

#https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html
resources:
  Resources:
    UsersStoryDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:custom.userStoryTableName}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - 
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH

    ApiGatewayRestApi:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name: '${self:provider.stage}-${self:service}'
        Description: 'API para administrar ${self:custom.serviceName}'
        #EndpointConfiguration: REGIONAL

    # This response is needed for custom authorizer failures cors support. https://docs.aws.amazon.com/apigateway/latest/developerguide/supported-gateway-response-types.html
    ExpiredGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        ResponseTemplates:
          application/json: |
            {
              "message":"Token Expired",
              "requestId":"$context.requestId"
            }
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'

    AuthFailureGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseTemplates:
            application/json: |
              {
                "message":$context.error.messageString,
                "requestId":"$context.requestId"
              }
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'

    DenyFailureGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseTemplates:
            #https://stackoverflow.com/a/49806967/10212963
            application/json: |
              {
                "message":$context.authorizer.customErrorMessage,
                "requestId":"$context.requestId"
              }
        ResponseType: ACCESS_DENIED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '403'

    UStoryApiGatewayAuthorizer:
      Type: "AWS::ApiGateway::Authorizer"
      Properties:
        AuthorizerResultTtlInSeconds: 0
        Name: "authorizer"
        AuthorizerUri: !Sub "arn:aws:apigateway:${self:provider.region}:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:${AWS::AccountId}:function:${self:provider.stage}-${self:custom.appName}-security-auth-post-authorizer/invocations"
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        Type: "TOKEN"
        IdentitySource: "method.request.header.Authorization"
      DependsOn:
        - "ApiGatewayRestApi"